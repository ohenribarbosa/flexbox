1.Estrutura Básica
	Projetado como um modelo unidimensional e como um método que pode oferecer distribuição de espaço entre itens em uma interface e recursos de alinhamento.

2.Diferença entre flex container e flex item

->Flex container: é a tag que envolve os itens, será nela que será aplicada a propriedade "display: flex". Tranforma todos os seus itens filhos em flex itens.

	# A propriedade display pode ser aplicado em qualquer tipo de tag, seja div, span, h1 ou mesmo em um "a". A partir do momento em que a tag possui itens filhos, ela é passível de ser aplicada a propriedade do "display: flex".

Propriedades relacionadas:

° display		° justify-content
° flex-direction	° align-items
° flex-wrap		° align-content
° flex-flow

1. Display: é o inicializador do container
2. flex-direction: fará o direcionamento dos itens, seja em linha ou coluna.
3. flex-wrap: vai ser aplicado para a quebra de linha, ou não.
4. flex-flow: é uma abreviação pro direction e wrap.
5. justify-content: alinha os itens do container de acordo com sua direção.
6. align-items: alinha os itens de acordo com o eixo do container.
7. align-content: alinha as linhas do container.

->Flex items: são os elementos filhos diretos do flex container. E também podem se tornar flex container.

# A partir do momento que há itens que podem ter filhos e esses filhos podem ter filhos, a propriedade do flex container pode ser aplicada.

° flex-grow	° order
° flex-basis	° align-self
° flex-shrink
° flex

1. flex-grow: define o fator de crescimento do item.
2. flex-basis: define o tamanho inicial do item antes da distribuição do espaço restante dentro do container.
3. flex-shrink: define a capacidade de redução.
4. flex: é uma abreviação para as propriedades 1, 2 e 3.
5. order: é relacionado a ordem de distribuição e listagem dos itens.
6. align-self: define o alinhamento de um item específico do container.


----------------> Flex container
----> Display: flex -> torna a tag um elemento do tipo flex container, e assim automáticamente todos os seus filhos diretos desta tag, tornam-se em flex items.
/*
            Modifica o comportamento, e cada item dentro do container passa a ocupar o máximo do seu conteúdo e se abriga dentro do container respeitando a orientação em linha.
            
            Inicializa o container, agrupa os elementos filhos e transforma-os de modo que respeitem o tamanho proporcional ao seu conteúdo.
*/

Um flex container tem por padrão o compartamento de orientação horizontal. Para modificar, usa-se a propriedade "flex-direction".

---> Flex-direction> é a propriedade que estabelece o eixo principal do container, definindo assim a direção que os flex items são colocados no flex container.

Os eixos:
- row (padrão): à direção do texto, esquerda para direita.
- row-reverse: sentido oposto a direção do texto.
- column: ordenação de cima para baixo, em coluna unica.
- column-reverse: ordenação inversa, de baixo para cima.

---> flex-wrap> é a propriedade que define se os itens devem ou não quebrar a linha. Por padrão eles não quebram linhas, isso faz com que os flex items sejam compactados além do limite do conteúdo.

comportamentos:
- nowrap: é o comportamento padrão, não permite a quebra de linha.
- wrap: permite a quebra de linha assim que não puder mais ser compactado.
- wrap-reverse: permite a quebra de linha assim que um dos flex itens não puder mais ser compactado, porém na direção contrária da linha, acima.

---> flex-flow> é um atalho para as propriedade flex-direction e flex-wrap.
Porém seu uso não é tão comum, visto que, quando mudamos o flex-direction para column, mantemos o padrão do flex-wrap que é o nowrpa.

---> justify-content> Essa propriedade vai se encarregar de alinhar os itens dentro do container de acordo com a direção pretendida e tratar da distribuição de espaçamento entre eles.

OBS: caso seus itens estejam ocupando 100% de todo o container, ela não se aplica.

As variações:
- Flex-start: início do container.
- Flex-end final do container.
- center: ao centro do container.
- space-between: cria um espaçamento igual entre os elementos.
- space-around: os espaçamentos do meio são duas vezes maiores que o inicial e final.

---> Align-items> trata do alinhamento dos flex itens de acordo com o eixo do container.
O alinhamento é diferente para quando os itens estão em colunas ou linhas.
Permite o alinhamento central no eixo vertical.

Tipos de alinhamento:
- center: alinhamento dos itens ao centro.
- stretch: padrão, e os flex itens crençam igualmente.
- flex-start: alinhamento dos itens no início.
- flex-end: alinhamento dos itens no final.
- baseline: alinhamento de acordo com a linha base da tipografia dos itens.

flex> trata da distribuição de tamanho dos itens dentro do container.

---> align-content> É a propriedade responsável por tratar o alinhamento das linhas do container em relação ao eixo vertical do container.

Precisamos que:
- O container utilize quebra de linhas;
- A altura do container seja maior que a soma das linhas dos itens.

Tipos de alinhamento:
- center: alinhamento dos itens ao centro;
- stretch: é o padrão e os flex itens crescem igualmente;
- flex-start: alinhamento dos itens no início;
- flex-end: alinhamento dos itens no final;
- space-between: cria um espaçamento igual entre os elementos;
- space-around: os espaçamento do meio são duas vezes maiores que o inicial e final.

-------------> Flex item
--> flex-grow: Define a proporcionalidade de crescimento dos itens, respeitando o tamanho de seus conteúdos internos.

OBS: não irá funcionar caso tenhamos adicionado justify-content ao nosso flex container.

O tipo de valor do flex-grow é numérico.

--> flex-basis: é a propriedade que estabelece o tamanho incial do item antes das distribuição de espaço restante dentro dele, usando como base o conteúdo interno disposto.

Basicamente, verifica o tamanho mínimo que os itens dentro do container precisam, e depois faz a distribuição da sobra de espaço antes e depois do conteúdo.

valores possíveis:
-auto: caso o item não tenha tamanho, este será proporcional ao conteúdo do item.
-px, %, em, ...: são valores exatos previamente definidos.
-0 (zero): terá relação com a definição do flex-grow. 

Uma vez que definimos o flex-basis: 0 e tenhamos o flex-grow proporcinal para todos os elementos, ele tentará ao máximo que os itens tenham um fator de crescimento referente.

--> flex-shrink: é a propriedade que estabelece a capacidade de redução ou compressão do tamanho de um item.
> recebe valores numéricos, sendo "1" o valor padrão.